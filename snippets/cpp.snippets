snippet ns
        namespace ${1}{
        $2
        }
snippet if
        if(${1}){
            ${2}
        }
snippet st
        struct ${1:Name}{
            ${2}
        };
snippet cst
        struct ${1:Name}{
            const ${2:Type}& d_${3:target};

            $1(const $2& $3) : d_$3($3){}

            bool operator()(const ${4:$2}& ${5:item}) const {
                return d_$3 == $5${6:};
            }
        };
snippet class
        class ${1:Name}{
          public:
            $1();
            ~$1();

     		  $2
        };
snippet vec
        bsl::vector<${1:T}> $2
snippet umap
        bsl::unordered_map<${1:T}> $2
snippet map
        bsl::map<${1:T}> $2
snippet uset
        bsl::unordered_set<${1:T}> $2
snippet set
        bsl::set<${1:T}> $2
snippet pair
        bsl::pair<${1:T}, ${2: T}> $3
snippet sp
        bsl::shared_ptr<${1:T}>$2
snippet msp
        bsl::make_shared<${1:T}>($2)$3
snippet inc
        #include <$1>
snippet log
        BALL_LOG_${1:ERROR} << "message=\"${2}\"$3"$4;
snippet iter
        bsl::vector<${1:T}>::iterator $2
snippet citer
        bsl::vector<${1:T}>::const_iterator $2
snippet fv
        for(bsl::vector<${1:T}>::iterator ${2:it} = ${3:collection}.begin(); $2 != $3.end(); ++$2){
            $4
        }
snippet if
        if(${1}){
            ${2}
        }
snippet header
		#ifndef ${1:FILENAME}
		#define $1

		namespace BloombergLP {
		namespace ${2:} {

		class ${3:ClassName} {
			public:
				${4:}
			protected:
				${5:}
		};

		} // ${2}
		} // BloombergLP

		#endif
snippet impl
		#include <${1:header}>

		namespace BloombergLP {
		namespace ${2:} {

		${3:}

		} // ${2}
		} // BloombergLP
